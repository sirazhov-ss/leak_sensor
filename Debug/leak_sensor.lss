
leak_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000196  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800098  00800098  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bb  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ab  00000000  00000000  000009e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000347  00000000  00000000  00000f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032a  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f3  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000018d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	37 c0       	rjmp	.+110    	; 0x7e <__vector_7>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 39       	cpi	r26, 0x98	; 152
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e9       	ldi	r26, 0x98	; 152
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 39       	cpi	r26, 0x9A	; 154
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	59 d0       	rcall	.+178    	; 0x10c <main>
  5a:	9b c0       	rjmp	.+310    	; 0x192 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PIN_Init>:
void USART_Flush( void )
{
	while ( UCSRA & (1<<RXC) ) {
		unsigned char dummy = UDR;
	}
}
  5e:	8a b3       	in	r24, 0x1a	; 26
  60:	83 60       	ori	r24, 0x03	; 3
  62:	8a bb       	out	0x1a, r24	; 26
  64:	8b b3       	in	r24, 0x1b	; 27
  66:	8e 7f       	andi	r24, 0xFE	; 254
  68:	8b bb       	out	0x1b, r24	; 27
  6a:	8b b3       	in	r24, 0x1b	; 27
  6c:	82 60       	ori	r24, 0x02	; 2
  6e:	8b bb       	out	0x1b, r24	; 27
  70:	81 b3       	in	r24, 0x11	; 17
  72:	83 7f       	andi	r24, 0xF3	; 243
  74:	81 bb       	out	0x11, r24	; 17
  76:	82 b3       	in	r24, 0x12	; 18
  78:	8c 60       	ori	r24, 0x0C	; 12
  7a:	82 bb       	out	0x12, r24	; 18
  7c:	08 95       	ret

0000007e <__vector_7>:
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	8c b1       	in	r24, 0x0c	; 12
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__data_end+0x1>
  94:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__data_end>
  98:	9f 91       	pop	r25
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <UART_Init>:
  a6:	92 b9       	out	0x02, r25	; 2
  a8:	89 b9       	out	0x09, r24	; 9
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	8e e0       	ldi	r24, 0x0E	; 14
  b0:	83 b9       	out	0x03, r24	; 3
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <UART_Transmit>:
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <UART_Transmit>
  c0:	8c b9       	out	0x0c, r24	; 12
  c2:	08 95       	ret

000000c4 <send_message>:

void send_message(char* message){
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	7c 01       	movw	r14, r24
	int length = strlen(message);
  d2:	fc 01       	movw	r30, r24
  d4:	01 90       	ld	r0, Z+
  d6:	00 20       	and	r0, r0
  d8:	e9 f7       	brne	.-6      	; 0xd4 <send_message+0x10>
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	8f 01       	movw	r16, r30
  de:	08 1b       	sub	r16, r24
  e0:	19 0b       	sbc	r17, r25
	for (int i = 0; i < length; i++) {
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <__stack+0x15>
		UART_Transmit(message[i]);
  e8:	f7 01       	movw	r30, r14
  ea:	ec 0f       	add	r30, r28
  ec:	fd 1f       	adc	r31, r29
  ee:	80 81       	ld	r24, Z
  f0:	e5 df       	rcall	.-54     	; 0xbc <UART_Transmit>
	}
}

void send_message(char* message){
	int length = strlen(message);
	for (int i = 0; i < length; i++) {
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	c0 17       	cp	r28, r16
  f6:	d1 07       	cpc	r29, r17
  f8:	bc f3       	brlt	.-18     	; 0xe8 <__stack+0x9>
		UART_Transmit(message[i]);
	};
	UART_Transmit('\n');
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	df df       	rcall	.-66     	; 0xbc <UART_Transmit>
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	ff 90       	pop	r15
 108:	ef 90       	pop	r14
 10a:	08 95       	ret

0000010c <main>:

int main(void)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	dd 27       	eor	r29, r29
 114:	c4 50       	subi	r28, 0x04	; 4
 116:	cd bf       	out	0x3d, r28	; 61
	PIN_Init();
 118:	a2 df       	rcall	.-188    	; 0x5e <PIN_Init>
	UART_Init(BAUDRATE);
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	c3 df       	rcall	.-122    	; 0xa6 <UART_Init>
	
	char* response[2] = {"Leak is detected!", "No leak!"};
 120:	80 e6       	ldi	r24, 0x60	; 96
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	82 e7       	ldi	r24, 0x72	; 114
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	9c 83       	std	Y+4, r25	; 0x04
 12e:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
	int counter = WAIT;
 130:	00 e4       	ldi	r16, 0x40	; 64
 132:	12 e4       	ldi	r17, 0x42	; 66
{
	PIN_Init();
	UART_Init(BAUDRATE);
	
	char* response[2] = {"Leak is detected!", "No leak!"};
	int i = 0;
 134:	e1 2c       	mov	r14, r1
 136:	f1 2c       	mov	r15, r1
	int counter = WAIT;
	
    while (1) 
    {
		PORTA ^= ((1<<0) | (1<<1));
 138:	9b b3       	in	r25, 0x1b	; 27
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	89 27       	eor	r24, r25
 13e:	8b bb       	out	0x1b, r24	; 27
		if (stop_key == '1' || counter <= 0) {
 140:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__data_end>
 144:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <__data_end+0x1>
 148:	c1 97       	sbiw	r24, 0x31	; 49
 14a:	19 f0       	breq	.+6      	; 0x152 <main+0x46>
 14c:	10 16       	cp	r1, r16
 14e:	11 06       	cpc	r1, r17
 150:	ec f0       	brlt	.+58     	; 0x18c <main+0x80>
			send_message(response[i]);
 152:	f7 01       	movw	r30, r14
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	8c 0f       	add	r24, r28
 15e:	9d 1f       	adc	r25, r29
 160:	e8 0f       	add	r30, r24
 162:	f9 1f       	adc	r31, r25
 164:	80 81       	ld	r24, Z
 166:	91 81       	ldd	r25, Z+1	; 0x01
 168:	ad df       	rcall	.-166    	; 0xc4 <send_message>
			i++;
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	e9 1a       	sub	r14, r25
 16e:	f9 0a       	sbc	r15, r25
			if (i > 1) {
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	e8 16       	cp	r14, r24
 174:	f1 04       	cpc	r15, r1
 176:	14 f0       	brlt	.+4      	; 0x17c <main+0x70>
				i = 0;
 178:	e1 2c       	mov	r14, r1
 17a:	f1 2c       	mov	r15, r1
			}
			if (counter <= 0) {
 17c:	10 16       	cp	r1, r16
 17e:	11 06       	cpc	r1, r17
 180:	2c f0       	brlt	.+10     	; 0x18c <main+0x80>
				send_message("counter is less than zero..");
 182:	8b e7       	ldi	r24, 0x7B	; 123
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	9e df       	rcall	.-196    	; 0xc4 <send_message>
				counter = WAIT;
 188:	00 e4       	ldi	r16, 0x40	; 64
 18a:	12 e4       	ldi	r17, 0x42	; 66
			}
			
		}
		counter--;
 18c:	01 50       	subi	r16, 0x01	; 1
 18e:	11 09       	sbc	r17, r1
    }
 190:	d3 cf       	rjmp	.-90     	; 0x138 <main+0x2c>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
