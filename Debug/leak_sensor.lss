
leak_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800088  00800088  000003d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f0  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000482  00000000  00000000  000012e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a6  00000000  00000000  00001ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000204b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	9b c0       	rjmp	.+310    	; 0x13a <__vector_1>
   4:	cc c0       	rjmp	.+408    	; 0x19e <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	fa c0       	rjmp	.+500    	; 0x204 <__vector_7>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e1       	ldi	r30, 0x1A	; 26
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 38       	cpi	r26, 0x88	; 136
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e8       	ldi	r26, 0x88	; 136
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 39       	cpi	r26, 0x90	; 144
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e9 d0       	rcall	.+466    	; 0x22c <main>
  5a:	5d c1       	rjmp	.+698    	; 0x316 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PIN_Init>:
}

unsigned char UART_Receive(void){
	while (!(UCSRA & (1<<RXC)));
	return UDR;
}
  5e:	81 b3       	in	r24, 0x11	; 17
  60:	83 7f       	andi	r24, 0xF3	; 243
  62:	81 bb       	out	0x11, r24	; 17
  64:	82 b3       	in	r24, 0x12	; 18
  66:	8c 60       	ori	r24, 0x0C	; 12
  68:	82 bb       	out	0x12, r24	; 18
  6a:	8b b7       	in	r24, 0x3b	; 59
  6c:	80 64       	ori	r24, 0x40	; 64
  6e:	8b bf       	out	0x3b, r24	; 59
  70:	85 b7       	in	r24, 0x35	; 53
  72:	82 60       	ori	r24, 0x02	; 2
  74:	85 bf       	out	0x35, r24	; 53
  76:	85 b7       	in	r24, 0x35	; 53
  78:	8e 7f       	andi	r24, 0xFE	; 254
  7a:	85 bf       	out	0x35, r24	; 53
  7c:	8b b7       	in	r24, 0x3b	; 59
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8b bf       	out	0x3b, r24	; 59
  82:	85 b7       	in	r24, 0x35	; 53
  84:	8c 60       	ori	r24, 0x0C	; 12
  86:	85 bf       	out	0x35, r24	; 53
  88:	8a b3       	in	r24, 0x1a	; 26
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	8a bb       	out	0x1a, r24	; 26
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	8c 7f       	andi	r24, 0xFC	; 252
  92:	8b bb       	out	0x1b, r24	; 27
  94:	08 95       	ret

00000096 <UART_Init>:
  96:	92 b9       	out	0x02, r25	; 2
  98:	89 b9       	out	0x09, r24	; 9
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
  9e:	8e e0       	ldi	r24, 0x0E	; 14
  a0:	83 b9       	out	0x03, r24	; 3
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	78 94       	sei
  aa:	08 95       	ret

000000ac <UART_Transmit>:
  ac:	5d 9b       	sbis	0x0b, 5	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <UART_Transmit>
  b0:	8c b9       	out	0x0c, r24	; 12
  b2:	08 95       	ret

000000b4 <send_message>:

void send_message(char* message){
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	7c 01       	movw	r14, r24
	int length = strlen(message);
  c2:	fc 01       	movw	r30, r24
  c4:	01 90       	ld	r0, Z+
  c6:	00 20       	and	r0, r0
  c8:	e9 f7       	brne	.-6      	; 0xc4 <send_message+0x10>
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	8f 01       	movw	r16, r30
  ce:	08 1b       	sub	r16, r24
  d0:	19 0b       	sbc	r17, r25
	for (int i = 0; i < length; i++) {
  d2:	c0 e0       	ldi	r28, 0x00	; 0
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <__stack+0x5>
		UART_Transmit(message[i]);
  d8:	f7 01       	movw	r30, r14
  da:	ec 0f       	add	r30, r28
  dc:	fd 1f       	adc	r31, r29
  de:	80 81       	ld	r24, Z
  e0:	e5 df       	rcall	.-54     	; 0xac <UART_Transmit>
	return UDR;
}

void send_message(char* message){
	int length = strlen(message);
	for (int i = 0; i < length; i++) {
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	c0 17       	cp	r28, r16
  e6:	d1 07       	cpc	r29, r17
  e8:	bc f3       	brlt	.-18     	; 0xd8 <send_message+0x24>
		UART_Transmit(message[i]);
	};
	UART_Transmit('\n');
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	df df       	rcall	.-66     	; 0xac <UART_Transmit>
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	ff 90       	pop	r15
  f8:	ef 90       	pop	r14
  fa:	08 95       	ret

000000fc <BT_ON>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f e3       	ldi	r18, 0x3F	; 63
  fe:	8d e0       	ldi	r24, 0x0D	; 13
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <BT_ON+0x6>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <BT_ON+0x10>
 10c:	00 00       	nop

void BT_ON(void){
	_delay_ms(1000);;
	PORTA |= ((1<<PA1) | (1<<PA0));
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	83 60       	ori	r24, 0x03	; 3
 112:	8b bb       	out	0x1b, r24	; 27
 114:	08 95       	ret

00000116 <BT_OFF>:
	
}

void BT_OFF(void){
	PORTA &= ~((1<<PA1) | (1<<PA0));
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	08 95       	ret

0000011e <get_state>:
}

int get_state(){
	int state = -1;
	if (~PIND & (1<<2)) {
 11e:	82 99       	sbic	0x10, 2	; 16
 120:	06 c0       	rjmp	.+12     	; 0x12e <get_state+0x10>
		state = 1;
		MCUCR |= 1<<ISC00;
 122:	85 b7       	in	r24, 0x35	; 53
 124:	81 60       	ori	r24, 0x01	; 1
 126:	85 bf       	out	0x35, r24	; 53
}

int get_state(){
	int state = -1;
	if (~PIND & (1<<2)) {
		state = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	08 95       	ret
		MCUCR |= 1<<ISC00;
	}
	else {
		state = 0;
		MCUCR &= ~(1<<ISC00);
 12e:	85 b7       	in	r24, 0x35	; 53
 130:	8e 7f       	andi	r24, 0xFE	; 254
 132:	85 bf       	out	0x35, r24	; 53
	if (~PIND & (1<<2)) {
		state = 1;
		MCUCR |= 1<<ISC00;
	}
	else {
		state = 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
		MCUCR &= ~(1<<ISC00);
	}
	return state;
}
 138:	08 95       	ret

0000013a <__vector_1>:

ISR(INT0_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	stop_key = 0;
 15c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <stop_key+0x1>
 160:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <stop_key>
	counter = WAIT;
 164:	84 e6       	ldi	r24, 0x64	; 100
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <counter+0x1>
 16c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <counter>
	leak = get_state();
 170:	d6 df       	rcall	.-84     	; 0x11e <get_state>
 172:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <leak+0x1>
 176:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <leak>
	BT_ON();
 17a:	c0 df       	rcall	.-128    	; 0xfc <BT_ON>
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <__vector_2>:

ISR(INT1_vect){
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	stop_key = 0;
 1c0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <stop_key+0x1>
 1c4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <stop_key>
	counter = WAIT;
 1c8:	84 e6       	ldi	r24, 0x64	; 100
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <counter+0x1>
 1d0:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <counter>
	lb = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 1dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	BT_ON();
 1e0:	8d df       	rcall	.-230    	; 0xfc <BT_ON>
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_7>:

ISR(USART_RX_vect){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
	stop_key = UDR;
 212:	8c b1       	in	r24, 0x0c	; 12
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <stop_key+0x1>
 21a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <stop_key>
}
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <main>:

int main(void)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	dd 27       	eor	r29, r29
 234:	c4 50       	subi	r28, 0x04	; 4
 236:	cd bf       	out	0x3d, r28	; 61
	PIN_Init();
 238:	12 df       	rcall	.-476    	; 0x5e <PIN_Init>
	UART_Init(BAUDRATE);
 23a:	8c e0       	ldi	r24, 0x0C	; 12
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2b df       	rcall	.-426    	; 0x96 <UART_Init>
	char* response[2] = {"No leak!", "Leak is detected!"};
 240:	80 e6       	ldi	r24, 0x60	; 96
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	9a 83       	std	Y+2, r25	; 0x02
 246:	89 83       	std	Y+1, r24	; 0x01
 248:	89 e6       	ldi	r24, 0x69	; 105
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	9c 83       	std	Y+4, r25	; 0x04
 24e:	8b 83       	std	Y+3, r24	; 0x03
	leak = get_state();
 250:	66 df       	rcall	.-308    	; 0x11e <get_state>
 252:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <leak+0x1>
 256:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <leak>
	BT_ON();
 25a:	50 df       	rcall	.-352    	; 0xfc <BT_ON>
	while (1){
		if (leak == 0 || leak == 1 || lb == 1){
 25c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <leak>
 260:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <leak+0x1>
 264:	ac 01       	movw	r20, r24
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	91 05       	cpc	r25, r1
 26a:	38 f0       	brcs	.+14     	; 0x27a <main+0x4e>
 26c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__data_end>
 270:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__data_end+0x1>
 274:	21 30       	cpi	r18, 0x01	; 1
 276:	31 05       	cpc	r19, r1
 278:	89 f7       	brne	.-30     	; 0x25c <main+0x30>
			if (stop_key != '1' && counter == WAIT) {
 27a:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <stop_key>
 27e:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <stop_key+0x1>
 282:	21 33       	cpi	r18, 0x31	; 49
 284:	31 05       	cpc	r19, r1
 286:	59 f1       	breq	.+86     	; 0x2de <main+0xb2>
 288:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <counter>
 28c:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <counter+0x1>
 290:	24 36       	cpi	r18, 0x64	; 100
 292:	31 05       	cpc	r19, r1
 294:	21 f5       	brne	.+72     	; 0x2de <main+0xb2>
				if (leak == 0 || leak == 1) {
 296:	42 30       	cpi	r20, 0x02	; 2
 298:	51 05       	cpc	r21, r1
 29a:	58 f4       	brcc	.+22     	; 0x2b2 <main+0x86>
					send_message(response[leak]);
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	e1 e0       	ldi	r30, 0x01	; 1
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	e8 0f       	add	r30, r24
 2aa:	f9 1f       	adc	r31, r25
 2ac:	80 81       	ld	r24, Z
 2ae:	91 81       	ldd	r25, Z+1	; 0x01
 2b0:	01 df       	rcall	.-510    	; 0xb4 <send_message>
				}
				if (lb == 1) {
 2b2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 2b6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	19 f4       	brne	.+6      	; 0x2c4 <main+0x98>
					send_message("Low battery!");
 2be:	8b e7       	ldi	r24, 0x7B	; 123
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	f8 de       	rcall	.-528    	; 0xb4 <send_message>
				}
				if (counter <= 0) {
 2c4:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <counter>
 2c8:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <counter+0x1>
 2cc:	18 16       	cp	r1, r24
 2ce:	19 06       	cpc	r1, r25
 2d0:	34 f0       	brlt	.+12     	; 0x2de <main+0xb2>
					counter = WAIT;
 2d2:	84 e6       	ldi	r24, 0x64	; 100
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <counter+0x1>
 2da:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <counter>
				}
			}
			counter--;
 2de:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <counter>
 2e2:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <counter+0x1>
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <counter+0x1>
 2ec:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <counter>
			if (stop_key == '1') {
 2f0:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <stop_key>
 2f4:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <stop_key+0x1>
 2f8:	c1 97       	sbiw	r24, 0x31	; 49
 2fa:	09 f0       	breq	.+2      	; 0x2fe <main+0xd2>
 2fc:	af cf       	rjmp	.-162    	; 0x25c <main+0x30>
				BT_OFF();
 2fe:	0b df       	rcall	.-490    	; 0x116 <BT_OFF>
				leak = -1;
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	9f ef       	ldi	r25, 0xFF	; 255
 304:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <leak+0x1>
 308:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <leak>
				lb = 0;
 30c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 310:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
 314:	a3 cf       	rjmp	.-186    	; 0x25c <main+0x30>

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
