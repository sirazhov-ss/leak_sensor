
leak_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000450  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800088  00800088  0000050c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000920  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065e  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000573  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00001af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a6  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000590  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002622  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	90 c0       	rjmp	.+288    	; 0x124 <__vector_1>
   4:	c7 c0       	rjmp	.+398    	; 0x194 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	4f c1       	rjmp	.+670    	; 0x2ae <__vector_7>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	f3 c0       	rjmp	.+486    	; 0x20c <__vector_18>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e5       	ldi	r30, 0x50	; 80
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 38       	cpi	r26, 0x88	; 136
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e8       	ldi	r26, 0x88	; 136
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 39       	cpi	r26, 0x91	; 145
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	39 d1       	rcall	.+626    	; 0x2cc <main>
  5a:	f8 c1       	rjmp	.+1008   	; 0x44c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PIN_Init>:
}

unsigned char UART_Receive(void){
	while (!(UCSRA & (1<<RXC)));
	return UDR;
}
  5e:	81 b3       	in	r24, 0x11	; 17
  60:	83 7f       	andi	r24, 0xF3	; 243
  62:	81 bb       	out	0x11, r24	; 17
  64:	82 b3       	in	r24, 0x12	; 18
  66:	83 7f       	andi	r24, 0xF3	; 243
  68:	82 bb       	out	0x12, r24	; 18
  6a:	8b b7       	in	r24, 0x3b	; 59
  6c:	80 68       	ori	r24, 0x80	; 128
  6e:	8b bf       	out	0x3b, r24	; 59
  70:	85 b7       	in	r24, 0x35	; 53
  72:	83 7f       	andi	r24, 0xF3	; 243
  74:	85 bf       	out	0x35, r24	; 53
  76:	78 94       	sei
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	83 60       	ori	r24, 0x03	; 3
  7c:	8a bb       	out	0x1a, r24	; 26
  7e:	8b b3       	in	r24, 0x1b	; 27
  80:	81 60       	ori	r24, 0x01	; 1
  82:	8b bb       	out	0x1b, r24	; 27
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8d 7f       	andi	r24, 0xFD	; 253
  88:	8b bb       	out	0x1b, r24	; 27
  8a:	08 95       	ret

0000008c <UART_Init>:
  8c:	92 b9       	out	0x02, r25	; 2
  8e:	89 b9       	out	0x09, r24	; 9
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	8a b9       	out	0x0a, r24	; 10
  94:	8e e0       	ldi	r24, 0x0E	; 14
  96:	83 b9       	out	0x03, r24	; 3
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8a b9       	out	0x0a, r24	; 10
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <UART_Transmit>:
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <UART_Transmit>
  a6:	8c b9       	out	0x0c, r24	; 12
  a8:	08 95       	ret

000000aa <send_message>:

void send_message(char* message){
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	7c 01       	movw	r14, r24
	int length = strlen(message);
  b8:	fc 01       	movw	r30, r24
  ba:	01 90       	ld	r0, Z+
  bc:	00 20       	and	r0, r0
  be:	e9 f7       	brne	.-6      	; 0xba <send_message+0x10>
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	8f 01       	movw	r16, r30
  c4:	08 1b       	sub	r16, r24
  c6:	19 0b       	sbc	r17, r25
	for (int i = 0; i < length; i++) {
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	06 c0       	rjmp	.+12     	; 0xda <send_message+0x30>
		UART_Transmit(message[i]);
  ce:	f7 01       	movw	r30, r14
  d0:	ec 0f       	add	r30, r28
  d2:	fd 1f       	adc	r31, r29
  d4:	80 81       	ld	r24, Z
  d6:	e5 df       	rcall	.-54     	; 0xa2 <UART_Transmit>
	return UDR;
}

void send_message(char* message){
	int length = strlen(message);
	for (int i = 0; i < length; i++) {
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	c0 17       	cp	r28, r16
  dc:	d1 07       	cpc	r29, r17
  de:	bc f3       	brlt	.-18     	; 0xce <send_message+0x24>
		UART_Transmit(message[i]);
	};
	UART_Transmit('\n');
  e0:	8a e0       	ldi	r24, 0x0A	; 10
  e2:	df df       	rcall	.-66     	; 0xa2 <UART_Transmit>
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	08 95       	ret

000000f2 <BT_ON>:

void BT_ON(void){
	PORTA |= ((1<<PA1) | (1<<PA0));
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	83 60       	ori	r24, 0x03	; 3
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	08 95       	ret

000000fa <BT_OFF>:
	
}

void BT_OFF(void){
	PORTA &= ~((1<<PA1) | (1<<PA0));
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	8c 7f       	andi	r24, 0xFC	; 252
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	08 95       	ret

00000102 <get_state>:
}

int get_state(int bit){
	int state = -1;
	if (~PIND & (1<<bit)) {
 102:	20 b3       	in	r18, 0x10	; 16
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	20 95       	com	r18
 108:	30 95       	com	r19
 10a:	02 c0       	rjmp	.+4      	; 0x110 <get_state+0xe>
 10c:	35 95       	asr	r19
 10e:	27 95       	ror	r18
 110:	8a 95       	dec	r24
 112:	e2 f7       	brpl	.-8      	; 0x10c <get_state+0xa>
 114:	20 ff       	sbrs	r18, 0
 116:	03 c0       	rjmp	.+6      	; 0x11e <get_state+0x1c>
		state = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	08 95       	ret
	}
	else {
		state = 0;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
	}
	return state;
}
 122:	08 95       	ret

00000124 <__vector_1>:

ISR(INT0_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	MCUCR &= ~(1<<SE);
 146:	85 b7       	in	r24, 0x35	; 53
 148:	8f 7d       	andi	r24, 0xDF	; 223
 14a:	85 bf       	out	0x35, r24	; 53
	GIMSK &= ~(1<<INT0);
 14c:	8b b7       	in	r24, 0x3b	; 59
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	8b bf       	out	0x3b, r24	; 59
	send = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 15a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	stop_key = '0';
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <stop_key>
	counter = WAIT;
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	97 e2       	ldi	r25, 0x27	; 39
 168:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <counter+0x1>
 16c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <counter>
	BT_ON();
 170:	c0 df       	rcall	.-128    	; 0xf2 <BT_ON>
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	7f 91       	pop	r23
 180:	6f 91       	pop	r22
 182:	5f 91       	pop	r21
 184:	4f 91       	pop	r20
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_2>:

ISR(INT1_vect){
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	MCUCR &= ~(1<<SE);
 1b6:	85 b7       	in	r24, 0x35	; 53
 1b8:	8f 7d       	andi	r24, 0xDF	; 223
 1ba:	85 bf       	out	0x35, r24	; 53
	GIMSK &= ~(1<<INT1);
 1bc:	8b b7       	in	r24, 0x3b	; 59
 1be:	8f 77       	andi	r24, 0x7F	; 127
 1c0:	8b bf       	out	0x3b, r24	; 59
	send = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 1ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	lb = 1;
 1ce:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <lb+0x1>
 1d2:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <lb>
	stop_key = '0';
 1d6:	80 e3       	ldi	r24, 0x30	; 48
 1d8:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <stop_key>
	counter = WAIT;
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	97 e2       	ldi	r25, 0x27	; 39
 1e0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <counter+0x1>
 1e4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <counter>
	BT_ON();
 1e8:	84 df       	rcall	.-248    	; 0xf2 <BT_ON>
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_18>:

ISR(WDT_OVERFLOW_vect){
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	if (PIND & (1<<PD2)) {
 22e:	82 9b       	sbis	0x10, 2	; 16
 230:	27 c0       	rjmp	.+78     	; 0x280 <__vector_18+0x74>
		MCUCR &= ~(1<<SE);
 232:	85 b7       	in	r24, 0x35	; 53
 234:	8f 7d       	andi	r24, 0xDF	; 223
 236:	85 bf       	out	0x35, r24	; 53
		WDTCR|=(1<<WDCE) | (1<<WDE);
 238:	81 b5       	in	r24, 0x21	; 33
 23a:	88 61       	ori	r24, 0x18	; 24
 23c:	81 bd       	out	0x21, r24	; 33
		WDTCR &= ~((1<<WDE) | (1<<WDIE));
 23e:	81 b5       	in	r24, 0x21	; 33
 240:	87 7b       	andi	r24, 0xB7	; 183
 242:	81 bd       	out	0x21, r24	; 33
		send = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 24c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		stop_key = '0';
 250:	80 e3       	ldi	r24, 0x30	; 48
 252:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <stop_key>
		counter = WAIT;
 256:	80 e1       	ldi	r24, 0x10	; 16
 258:	97 e2       	ldi	r25, 0x27	; 39
 25a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <counter+0x1>
 25e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <counter>
		BT_ON();
 262:	47 df       	rcall	.-370    	; 0xf2 <BT_ON>
 264:	12 c0       	rjmp	.+36     	; 0x28a <__vector_18+0x7e>
	}
	else{
		for (int i=0; i<4; i++){
			PORTA ^= 1<<PA0;
 266:	9b b3       	in	r25, 0x1b	; 27
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 27       	eor	r24, r25
 26c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	8f e4       	ldi	r24, 0x4F	; 79
 270:	93 ec       	ldi	r25, 0xC3	; 195
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <__vector_18+0x66>
 276:	00 c0       	rjmp	.+0      	; 0x278 <__vector_18+0x6c>
 278:	00 00       	nop
		stop_key = '0';
		counter = WAIT;
		BT_ON();
	}
	else{
		for (int i=0; i<4; i++){
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	02 c0       	rjmp	.+4      	; 0x284 <__vector_18+0x78>
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	24 30       	cpi	r18, 0x04	; 4
 286:	31 05       	cpc	r19, r1
 288:	74 f3       	brlt	.-36     	; 0x266 <__vector_18+0x5a>
			PORTA ^= 1<<PA0;
			_delay_ms(200);
		}
	}
	asm("wdr");
 28a:	a8 95       	wdr
}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_7>:

ISR(USART_RX_vect){
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
	stop_key = UDR;
 2ba:	8c b1       	in	r24, 0x0c	; 12
 2bc:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <stop_key>
}
 2c0:	8f 91       	pop	r24
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <main>:

int main(void)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	dd 27       	eor	r29, r29
 2d4:	c4 50       	subi	r28, 0x04	; 4
 2d6:	cd bf       	out	0x3d, r28	; 61
	PIN_Init();
 2d8:	c2 de       	rcall	.-636    	; 0x5e <PIN_Init>
	UART_Init(BAUDRATE);
 2da:	8c e0       	ldi	r24, 0x0C	; 12
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	d6 de       	rcall	.-596    	; 0x8c <UART_Init>
	char* response[2] = {"No leak!", "Leak is detected!"};
 2e0:	80 e6       	ldi	r24, 0x60	; 96
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9a 83       	std	Y+2, r25	; 0x02
 2e6:	89 83       	std	Y+1, r24	; 0x01
 2e8:	89 e6       	ldi	r24, 0x69	; 105
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	9c 83       	std	Y+4, r25	; 0x04
 2ee:	8b 83       	std	Y+3, r24	; 0x03
 2f0:	2f e9       	ldi	r18, 0x9F	; 159
 2f2:	86 e8       	ldi	r24, 0x86	; 134
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x2a>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0x34>
 300:	00 00       	nop
	_delay_ms(500);
	lb = get_state(3);
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fd de       	rcall	.-518    	; 0x102 <get_state>
 308:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <lb+0x1>
 30c:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <lb>
 310:	2f e9       	ldi	r18, 0x9F	; 159
 312:	86 e8       	ldi	r24, 0x86	; 134
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x4a>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x54>
 320:	00 00       	nop
	_delay_ms(500);
	leak = get_state(2);
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	ed de       	rcall	.-550    	; 0x102 <get_state>
 328:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <leak+0x1>
 32c:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <leak>
 330:	2f e9       	ldi	r18, 0x9F	; 159
 332:	86 e8       	ldi	r24, 0x86	; 134
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	21 50       	subi	r18, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x6a>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0x74>
 340:	00 00       	nop
	_delay_ms(500);
	PORTA |= 1<<PA1;
 342:	8b b3       	in	r24, 0x1b	; 27
 344:	82 60       	ori	r24, 0x02	; 2
 346:	8b bb       	out	0x1b, r24	; 27
	stop_key = '0';
 348:	80 e3       	ldi	r24, 0x30	; 48
 34a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <stop_key>
	counter = WAIT;
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	97 e2       	ldi	r25, 0x27	; 39
 352:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <counter+0x1>
 356:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <counter>
	send = 1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 362:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	while (1){
		if (send == 1) {
 366:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 36a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	09 f0       	breq	.+2      	; 0x374 <main+0xa8>
 372:	6a c0       	rjmp	.+212    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			leak = get_state(2);
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	c4 de       	rcall	.-632    	; 0x102 <get_state>
 37a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <leak+0x1>
 37e:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <leak>
			if (stop_key != '1' && counter == WAIT) {
 382:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <stop_key>
 386:	81 33       	cpi	r24, 0x31	; 49
 388:	f9 f0       	breq	.+62     	; 0x3c8 <main+0xfc>
 38a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <counter>
 38e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <counter+0x1>
 392:	80 31       	cpi	r24, 0x10	; 16
 394:	97 42       	sbci	r25, 0x27	; 39
 396:	c1 f4       	brne	.+48     	; 0x3c8 <main+0xfc>
				if (lb == 1) {
 398:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <lb>
 39c:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <lb+0x1>
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	19 f4       	brne	.+6      	; 0x3aa <main+0xde>
					send_message("Low battery!");
 3a4:	8b e7       	ldi	r24, 0x7B	; 123
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	80 de       	rcall	.-768    	; 0xaa <send_message>
				}
				send_message(response[leak]);
 3aa:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <leak>
 3ae:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <leak+0x1>
 3b2:	ee 0f       	add	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	8c 0f       	add	r24, r28
 3bc:	9d 1f       	adc	r25, r29
 3be:	e8 0f       	add	r30, r24
 3c0:	f9 1f       	adc	r31, r25
 3c2:	80 81       	ld	r24, Z
 3c4:	91 81       	ldd	r25, Z+1	; 0x01
 3c6:	71 de       	rcall	.-798    	; 0xaa <send_message>
			}
			if (counter <= 0) {
 3c8:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <counter>
 3cc:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <counter+0x1>
 3d0:	18 16       	cp	r1, r24
 3d2:	19 06       	cpc	r1, r25
 3d4:	3c f0       	brlt	.+14     	; 0x3e4 <main+0x118>
					counter = WAIT;
 3d6:	80 e1       	ldi	r24, 0x10	; 16
 3d8:	97 e2       	ldi	r25, 0x27	; 39
 3da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <counter+0x1>
 3de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <counter>
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <main+0x122>
			}
			else {
			counter--;
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <counter+0x1>
 3ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <counter>
			}
			if (stop_key == '1') {
 3ee:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <stop_key>
 3f2:	81 33       	cpi	r24, 0x31	; 49
 3f4:	49 f5       	brne	.+82     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
				BT_OFF();
 3f6:	81 de       	rcall	.-766    	; 0xfa <BT_OFF>
				leak = -1;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	9f ef       	ldi	r25, 0xFF	; 255
 3fc:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <leak+0x1>
 400:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <leak>
				send = 0;
 404:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 408:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
				lb = 0;
 40c:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <lb+0x1>
 410:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <lb>
				if (~PIND & (1<<PD2)) {
 414:	82 99       	sbic	0x10, 2	; 16
 416:	0c c0       	rjmp	.+24     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
					MCUCR |= 1<<SE;
 418:	85 b7       	in	r24, 0x35	; 53
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	85 bf       	out	0x35, r24	; 53
					MCUCR|=(1<<SM1) | (1<<SM0);
 41e:	85 b7       	in	r24, 0x35	; 53
 420:	80 65       	ori	r24, 0x50	; 80
 422:	85 bf       	out	0x35, r24	; 53
					WDTCR|=(1<<WDCE) | (1<<WDE);
 424:	81 b5       	in	r24, 0x21	; 33
 426:	88 61       	ori	r24, 0x18	; 24
 428:	81 bd       	out	0x21, r24	; 33
					WDTCR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
 42a:	87 e4       	ldi	r24, 0x47	; 71
 42c:	81 bd       	out	0x21, r24	; 33
 42e:	0c c0       	rjmp	.+24     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
				}
				else {
					MCUCR |= 1<<SE;
 430:	85 b7       	in	r24, 0x35	; 53
 432:	80 62       	ori	r24, 0x20	; 32
 434:	85 bf       	out	0x35, r24	; 53
					MCUCR|=(1<<SM1) | (1<<SM0);
 436:	85 b7       	in	r24, 0x35	; 53
 438:	80 65       	ori	r24, 0x50	; 80
 43a:	85 bf       	out	0x35, r24	; 53
					GIMSK|= 1<<INT0;
 43c:	8b b7       	in	r24, 0x3b	; 59
 43e:	80 64       	ori	r24, 0x40	; 64
 440:	8b bf       	out	0x3b, r24	; 59
					MCUCR &= ~((1<<ISC01) | (1<< ISC00));
 442:	85 b7       	in	r24, 0x35	; 53
 444:	8c 7f       	andi	r24, 0xFC	; 252
 446:	85 bf       	out	0x35, r24	; 53
				}
				
			}
		}
		asm("sleep");
 448:	88 95       	sleep
	}
 44a:	8d cf       	rjmp	.-230    	; 0x366 <main+0x9a>

0000044c <_exit>:
 44c:	f8 94       	cli

0000044e <__stop_program>:
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__stop_program>
