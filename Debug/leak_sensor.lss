
leak_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000005a0  00000634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000b2  008000b2  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bd  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065e  00000000  00000000  00001135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074e  00000000  00000000  00001793  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00001ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064c  00000000  00000000  0000248f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002adb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	97 c0       	rjmp	.+302    	; 0x132 <__vector_1>
   4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	82 c0       	rjmp	.+260    	; 0x114 <__vector_7>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	08 c1       	rjmp	.+528    	; 0x236 <__vector_18>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ea       	ldi	r30, 0xA0	; 160
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 3b       	cpi	r26, 0xB2	; 178
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 eb       	ldi	r26, 0xB2	; 178
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 3b       	cpi	r26, 0xBB	; 187
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	95 d1       	rcall	.+810    	; 0x384 <main>
  5a:	a0 c2       	rjmp	.+1344   	; 0x59c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PIN_Init>:
}

unsigned char UART_Receive(void){
	while (!(UCSRA & (1<<RXC)));
	return UDR;
}
  5e:	81 b3       	in	r24, 0x11	; 17
  60:	83 7f       	andi	r24, 0xF3	; 243
  62:	81 bb       	out	0x11, r24	; 17
  64:	8a b3       	in	r24, 0x1a	; 26
  66:	83 60       	ori	r24, 0x03	; 3
  68:	8a bb       	out	0x1a, r24	; 26
  6a:	82 b3       	in	r24, 0x12	; 18
  6c:	83 7f       	andi	r24, 0xF3	; 243
  6e:	82 bb       	out	0x12, r24	; 18
  70:	8b b3       	in	r24, 0x1b	; 27
  72:	8d 7f       	andi	r24, 0xFD	; 253
  74:	8b bb       	out	0x1b, r24	; 27
  76:	8b b3       	in	r24, 0x1b	; 27
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	8b bb       	out	0x1b, r24	; 27
  7c:	08 95       	ret

0000007e <UART_Init>:
  7e:	92 b9       	out	0x02, r25	; 2
  80:	89 b9       	out	0x09, r24	; 9
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
  86:	8e e0       	ldi	r24, 0x0E	; 14
  88:	83 b9       	out	0x03, r24	; 3
  8a:	8a b1       	in	r24, 0x0a	; 10
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <UART_Transmit>:
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <UART_Transmit>
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <send_message>:

void send_message(char* message){
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	7c 01       	movw	r14, r24
	int length = strlen(message);
  a8:	fc 01       	movw	r30, r24
  aa:	01 90       	ld	r0, Z+
  ac:	00 20       	and	r0, r0
  ae:	e9 f7       	brne	.-6      	; 0xaa <send_message+0x10>
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	8f 01       	movw	r16, r30
  b4:	08 1b       	sub	r16, r24
  b6:	19 0b       	sbc	r17, r25
	for (int i = 0; i < length; i++) {
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
  bc:	06 c0       	rjmp	.+12     	; 0xca <send_message+0x30>
		UART_Transmit(message[i]);
  be:	f7 01       	movw	r30, r14
  c0:	ec 0f       	add	r30, r28
  c2:	fd 1f       	adc	r31, r29
  c4:	80 81       	ld	r24, Z
  c6:	e5 df       	rcall	.-54     	; 0x92 <UART_Transmit>
	return UDR;
}

void send_message(char* message){
	int length = strlen(message);
	for (int i = 0; i < length; i++) {
  c8:	21 96       	adiw	r28, 0x01	; 1
  ca:	c0 17       	cp	r28, r16
  cc:	d1 07       	cpc	r29, r17
  ce:	bc f3       	brlt	.-18     	; 0xbe <send_message+0x24>
		UART_Transmit(message[i]);
	};
	UART_Transmit('\n');
  d0:	8a e0       	ldi	r24, 0x0A	; 10
  d2:	df df       	rcall	.-66     	; 0x92 <UART_Transmit>
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	1f 91       	pop	r17
  da:	0f 91       	pop	r16
  dc:	ff 90       	pop	r15
  de:	ef 90       	pop	r14
  e0:	08 95       	ret

000000e2 <BT_ON>:

void BT_ON(void){
	PORTA |= ((1<<PA1) | (1<<PA0));
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	83 60       	ori	r24, 0x03	; 3
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	08 95       	ret

000000ea <BT_OFF>:
	
}

void BT_OFF(void){
	PORTA &= ~((1<<PA1) | (1<<PA0));
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	8c 7f       	andi	r24, 0xFC	; 252
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	08 95       	ret

000000f2 <get_state>:
}

int get_state(int bit){
	int state = -1;
	if (~PIND & (1<<bit)) {
  f2:	20 b3       	in	r18, 0x10	; 16
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	20 95       	com	r18
  f8:	30 95       	com	r19
  fa:	02 c0       	rjmp	.+4      	; 0x100 <get_state+0xe>
  fc:	35 95       	asr	r19
  fe:	27 95       	ror	r18
 100:	8a 95       	dec	r24
 102:	e2 f7       	brpl	.-8      	; 0xfc <get_state+0xa>
 104:	20 ff       	sbrs	r18, 0
 106:	03 c0       	rjmp	.+6      	; 0x10e <get_state+0x1c>
		state = 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret
	}
	else {
		state = 0;
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
	}
	return state;
}
 112:	08 95       	ret

00000114 <__vector_7>:

ISR(USART_RX_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
	stop_key = UDR;
 120:	8c b1       	in	r24, 0x0c	; 12
 122:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <stop_key>
}
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_1>:

ISR(INT0_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	MCUCR &= ~(1<<SE);
 154:	85 b7       	in	r24, 0x35	; 53
 156:	8f 7d       	andi	r24, 0xDF	; 223
 158:	85 bf       	out	0x35, r24	; 53
	WDTCR|=(1<<WDCE) | (1<<WDE);
 15a:	81 b5       	in	r24, 0x21	; 33
 15c:	88 61       	ori	r24, 0x18	; 24
 15e:	81 bd       	out	0x21, r24	; 33
	WDTCR &= ~((1<<WDE) | (1<<WDIE));
 160:	81 b5       	in	r24, 0x21	; 33
 162:	87 7b       	andi	r24, 0xB7	; 183
 164:	81 bd       	out	0x21, r24	; 33
	GIMSK &= ~(1<<INT0);
 166:	8b b7       	in	r24, 0x3b	; 59
 168:	8f 7b       	andi	r24, 0xBF	; 191
 16a:	8b bf       	out	0x3b, r24	; 59
	GIMSK &= ~(1<<INT1);
 16c:	8b b7       	in	r24, 0x3b	; 59
 16e:	8f 77       	andi	r24, 0x7F	; 127
 170:	8b bf       	out	0x3b, r24	; 59
	send = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__data_end+0x1>
 17a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
	stop_key = '0';
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <stop_key>
	counter = WAIT;
 184:	80 e1       	ldi	r24, 0x10	; 16
 186:	97 e2       	ldi	r25, 0x27	; 39
 188:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <counter+0x1>
 18c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <counter>
	BT_ON();
 190:	a8 df       	rcall	.-176    	; 0xe2 <BT_ON>
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_2>:

ISR(INT1_vect){
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	MCUCR &= ~(1<<SE);
 1d6:	85 b7       	in	r24, 0x35	; 53
 1d8:	8f 7d       	andi	r24, 0xDF	; 223
 1da:	85 bf       	out	0x35, r24	; 53
	WDTCR|=(1<<WDCE) | (1<<WDE);
 1dc:	81 b5       	in	r24, 0x21	; 33
 1de:	88 61       	ori	r24, 0x18	; 24
 1e0:	81 bd       	out	0x21, r24	; 33
	WDTCR &= ~((1<<WDE) | (1<<WDIE));
 1e2:	81 b5       	in	r24, 0x21	; 33
 1e4:	87 7b       	andi	r24, 0xB7	; 183
 1e6:	81 bd       	out	0x21, r24	; 33
	GIMSK &= ~(1<<INT0);
 1e8:	8b b7       	in	r24, 0x3b	; 59
 1ea:	8f 7b       	andi	r24, 0xBF	; 191
 1ec:	8b bf       	out	0x3b, r24	; 59
	GIMSK &= ~(1<<INT1);
 1ee:	8b b7       	in	r24, 0x3b	; 59
 1f0:	8f 77       	andi	r24, 0x7F	; 127
 1f2:	8b bf       	out	0x3b, r24	; 59
	send = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__data_end+0x1>
 1fc:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
	stop_key = '0';
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <stop_key>
	counter = WAIT;
 206:	80 e1       	ldi	r24, 0x10	; 16
 208:	97 e2       	ldi	r25, 0x27	; 39
 20a:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <counter+0x1>
 20e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <counter>
	BT_ON();
 212:	67 df       	rcall	.-306    	; 0xe2 <BT_ON>
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_18>:

ISR(WDT_OVERFLOW_vect){
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
	if ((PIND & (1<<PD2) && leak == 1) || (~PIND & (1<<PD2) && leak == 0) || (PIND & (1<<PD3) && lb == 1) || (~PIND & (1<<PD3) && lb == 0)) {
 258:	82 9b       	sbis	0x10, 2	; 16
 25a:	06 c0       	rjmp	.+12     	; 0x268 <__vector_18+0x32>
 25c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <leak>
 260:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <leak+0x1>
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	c1 f0       	breq	.+48     	; 0x298 <__vector_18+0x62>
 268:	82 99       	sbic	0x10, 2	; 16
 26a:	06 c0       	rjmp	.+12     	; 0x278 <__vector_18+0x42>
 26c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <leak>
 270:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <leak+0x1>
 274:	89 2b       	or	r24, r25
 276:	81 f0       	breq	.+32     	; 0x298 <__vector_18+0x62>
 278:	83 9b       	sbis	0x10, 3	; 16
 27a:	06 c0       	rjmp	.+12     	; 0x288 <__vector_18+0x52>
 27c:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <lb>
 280:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <lb+0x1>
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	41 f0       	breq	.+16     	; 0x298 <__vector_18+0x62>
 288:	83 99       	sbic	0x10, 3	; 16
 28a:	25 c0       	rjmp	.+74     	; 0x2d6 <__vector_18+0xa0>
 28c:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <lb>
 290:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <lb+0x1>
 294:	89 2b       	or	r24, r25
 296:	f9 f4       	brne	.+62     	; 0x2d6 <__vector_18+0xa0>
		MCUCR &= ~(1<<SE);
 298:	85 b7       	in	r24, 0x35	; 53
 29a:	8f 7d       	andi	r24, 0xDF	; 223
 29c:	85 bf       	out	0x35, r24	; 53
		WDTCR|=(1<<WDCE) | (1<<WDE);
 29e:	81 b5       	in	r24, 0x21	; 33
 2a0:	88 61       	ori	r24, 0x18	; 24
 2a2:	81 bd       	out	0x21, r24	; 33
		WDTCR &= ~((1<<WDE) | (1<<WDIE));
 2a4:	81 b5       	in	r24, 0x21	; 33
 2a6:	87 7b       	andi	r24, 0xB7	; 183
 2a8:	81 bd       	out	0x21, r24	; 33
		GIMSK &= ~(1<<INT0);
 2aa:	8b b7       	in	r24, 0x3b	; 59
 2ac:	8f 7b       	andi	r24, 0xBF	; 191
 2ae:	8b bf       	out	0x3b, r24	; 59
		GIMSK &= ~(1<<INT1);
 2b0:	8b b7       	in	r24, 0x3b	; 59
 2b2:	8f 77       	andi	r24, 0x7F	; 127
 2b4:	8b bf       	out	0x3b, r24	; 59
		send = 1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__data_end+0x1>
 2be:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
		stop_key = '0';
 2c2:	80 e3       	ldi	r24, 0x30	; 48
 2c4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <stop_key>
		counter = WAIT;
 2c8:	80 e1       	ldi	r24, 0x10	; 16
 2ca:	97 e2       	ldi	r25, 0x27	; 39
 2cc:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <counter+0x1>
 2d0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <counter>
		BT_ON();
 2d4:	06 df       	rcall	.-500    	; 0xe2 <BT_ON>
	}
	if (~PIND & (1<<PD2) && PIND & (1<<PD3)){
 2d6:	82 99       	sbic	0x10, 2	; 16
 2d8:	15 c0       	rjmp	.+42     	; 0x304 <__vector_18+0xce>
 2da:	83 99       	sbic	0x10, 3	; 16
 2dc:	0e c0       	rjmp	.+28     	; 0x2fa <__vector_18+0xc4>
 2de:	12 c0       	rjmp	.+36     	; 0x304 <__vector_18+0xce>
		for (int i=0; i<4; i++){
			PORTA ^= 1<<PA0;
 2e0:	9b b3       	in	r25, 0x1b	; 27
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	89 27       	eor	r24, r25
 2e6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	8f e4       	ldi	r24, 0x4F	; 79
 2ea:	93 ec       	ldi	r25, 0xC3	; 195
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <__vector_18+0xb6>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <__vector_18+0xbc>
 2f2:	00 00       	nop
		stop_key = '0';
		counter = WAIT;
		BT_ON();
	}
	if (~PIND & (1<<PD2) && PIND & (1<<PD3)){
		for (int i=0; i<4; i++){
 2f4:	2f 5f       	subi	r18, 0xFF	; 255
 2f6:	3f 4f       	sbci	r19, 0xFF	; 255
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <__vector_18+0xc8>
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	24 30       	cpi	r18, 0x04	; 4
 300:	31 05       	cpc	r19, r1
 302:	74 f3       	brlt	.-36     	; 0x2e0 <__vector_18+0xaa>
			PORTA ^= 1<<PA0;
			_delay_ms(200);
		}
	}
	if (PIND & (1<<PD2) && ~PIND & (1<<PD3)){
 304:	82 9b       	sbis	0x10, 2	; 16
 306:	15 c0       	rjmp	.+42     	; 0x332 <__vector_18+0xfc>
 308:	83 9b       	sbis	0x10, 3	; 16
 30a:	0e c0       	rjmp	.+28     	; 0x328 <__vector_18+0xf2>
 30c:	12 c0       	rjmp	.+36     	; 0x332 <__vector_18+0xfc>
		for (int i=0; i<8; i++){
			PORTA ^= 1<<PA0;
 30e:	9b b3       	in	r25, 0x1b	; 27
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	89 27       	eor	r24, r25
 314:	8b bb       	out	0x1b, r24	; 27
 316:	8f e4       	ldi	r24, 0x4F	; 79
 318:	93 ec       	ldi	r25, 0xC3	; 195
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <__vector_18+0xe4>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <__vector_18+0xea>
 320:	00 00       	nop
			PORTA ^= 1<<PA0;
			_delay_ms(200);
		}
	}
	if (PIND & (1<<PD2) && ~PIND & (1<<PD3)){
		for (int i=0; i<8; i++){
 322:	2f 5f       	subi	r18, 0xFF	; 255
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	02 c0       	rjmp	.+4      	; 0x32c <__vector_18+0xf6>
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	28 30       	cpi	r18, 0x08	; 8
 32e:	31 05       	cpc	r19, r1
 330:	74 f3       	brlt	.-36     	; 0x30e <__vector_18+0xd8>
			PORTA ^= 1<<PA0;
			_delay_ms(200);
		}
	}
	if (~PIND & (1<<PD2) && ~PIND & (1<<PD3)){
 332:	82 99       	sbic	0x10, 2	; 16
 334:	15 c0       	rjmp	.+42     	; 0x360 <__vector_18+0x12a>
 336:	83 9b       	sbis	0x10, 3	; 16
 338:	0e c0       	rjmp	.+28     	; 0x356 <__vector_18+0x120>
 33a:	12 c0       	rjmp	.+36     	; 0x360 <__vector_18+0x12a>
		for (int i=0; i<16; i++){
			PORTA ^= 1<<PA0;
 33c:	9b b3       	in	r25, 0x1b	; 27
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	89 27       	eor	r24, r25
 342:	8b bb       	out	0x1b, r24	; 27
 344:	8f e4       	ldi	r24, 0x4F	; 79
 346:	93 ec       	ldi	r25, 0xC3	; 195
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <__vector_18+0x112>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <__vector_18+0x118>
 34e:	00 00       	nop
			PORTA ^= 1<<PA0;
			_delay_ms(200);
		}
	}
	if (~PIND & (1<<PD2) && ~PIND & (1<<PD3)){
		for (int i=0; i<16; i++){
 350:	2f 5f       	subi	r18, 0xFF	; 255
 352:	3f 4f       	sbci	r19, 0xFF	; 255
 354:	02 c0       	rjmp	.+4      	; 0x35a <__vector_18+0x124>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	20 31       	cpi	r18, 0x10	; 16
 35c:	31 05       	cpc	r19, r1
 35e:	74 f3       	brlt	.-36     	; 0x33c <__vector_18+0x106>
			PORTA ^= 1<<PA0;
			_delay_ms(200);
		}
	}
	asm("wdr");
 360:	a8 95       	wdr
}
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <main>:

int main(void)
{
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	dd 27       	eor	r29, r29
 38c:	c8 50       	subi	r28, 0x08	; 8
 38e:	cd bf       	out	0x3d, r28	; 61
	PIN_Init();
 390:	66 de       	rcall	.-820    	; 0x5e <PIN_Init>
	UART_Init(BAUDRATE);
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	73 de       	rcall	.-794    	; 0x7e <UART_Init>
	sei();
 398:	78 94       	sei
	char* response[4] = {"No leak! & GB", "Leak is detected! & GB", "No leak! & LB", "Leak is detected! & LB"};
 39a:	88 e0       	ldi	r24, 0x08	; 8
 39c:	e0 e6       	ldi	r30, 0x60	; 96
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	de 01       	movw	r26, r28
 3a2:	11 96       	adiw	r26, 0x01	; 1
 3a4:	01 90       	ld	r0, Z+
 3a6:	0d 92       	st	X+, r0
 3a8:	8a 95       	dec	r24
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x20>
 3ac:	2f e9       	ldi	r18, 0x9F	; 159
 3ae:	46 e8       	ldi	r20, 0x86	; 134
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	40 40       	sbci	r20, 0x00	; 0
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0x2e>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0x38>
 3bc:	00 00       	nop
	_delay_ms(500);
	PORTA |= 1<<PA1;
 3be:	8b b3       	in	r24, 0x1b	; 27
 3c0:	82 60       	ori	r24, 0x02	; 2
 3c2:	8b bb       	out	0x1b, r24	; 27
 3c4:	9f e3       	ldi	r25, 0x3F	; 63
 3c6:	2d e0       	ldi	r18, 0x0D	; 13
 3c8:	43 e0       	ldi	r20, 0x03	; 3
 3ca:	91 50       	subi	r25, 0x01	; 1
 3cc:	20 40       	sbci	r18, 0x00	; 0
 3ce:	40 40       	sbci	r20, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0x46>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x50>
 3d4:	00 00       	nop
	_delay_ms(1000);
	stop_key = '0';
 3d6:	80 e3       	ldi	r24, 0x30	; 48
 3d8:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <stop_key>
	counter = WAIT;
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	97 e2       	ldi	r25, 0x27	; 39
 3e0:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <counter+0x1>
 3e4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <counter>
	send = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__data_end+0x1>
 3f0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
	int counter2 = WAIT2;
 3f4:	02 e0       	ldi	r16, 0x02	; 2
 3f6:	10 e0       	ldi	r17, 0x00	; 0
	while (1){
		if (send == 1) {
 3f8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 3fc:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x1>
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	c9 c0       	rjmp	.+402    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
			leak = get_state(2);
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	73 de       	rcall	.-794    	; 0xf2 <get_state>
 40c:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <leak+0x1>
 410:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <leak>
			lb = get_state(3);	
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	6c de       	rcall	.-808    	; 0xf2 <get_state>
 41a:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <lb+0x1>
 41e:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <lb>
			if (stop_key != '1' && counter == WAIT && counter2 == WAIT2) {
 422:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <stop_key>
 426:	21 33       	cpi	r18, 0x31	; 49
 428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	42 c0       	rjmp	.+132    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 42c:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <counter>
 430:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <counter+0x1>
 434:	20 31       	cpi	r18, 0x10	; 16
 436:	37 42       	sbci	r19, 0x27	; 39
 438:	d9 f5       	brne	.+118    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 43a:	02 30       	cpi	r16, 0x02	; 2
 43c:	11 05       	cpc	r17, r1
 43e:	c1 f5       	brne	.+112    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				if (leak == 0 && lb == 0) {
 440:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <leak>
 444:	30 91 ba 00 	lds	r19, 0x00BA	; 0x8000ba <leak+0x1>
 448:	23 2b       	or	r18, r19
 44a:	29 f4       	brne	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 44c:	89 2b       	or	r24, r25
 44e:	19 f4       	brne	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
					send_message(response[0]);
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	9a 81       	ldd	r25, Y+2	; 0x02
 454:	22 de       	rcall	.-956    	; 0x9a <send_message>
				}
				if (leak == 1 && lb == 0) {
 456:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <leak>
 45a:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <leak+0x1>
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	49 f4       	brne	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 462:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <lb>
 466:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <lb+0x1>
 46a:	89 2b       	or	r24, r25
 46c:	19 f4       	brne	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
					send_message(response[1]);
 46e:	8b 81       	ldd	r24, Y+3	; 0x03
 470:	9c 81       	ldd	r25, Y+4	; 0x04
 472:	13 de       	rcall	.-986    	; 0x9a <send_message>
				}
				if (leak == 0 && lb == 1) {
 474:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <leak>
 478:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <leak+0x1>
 47c:	89 2b       	or	r24, r25
 47e:	49 f4       	brne	.+18     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 480:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <lb>
 484:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <lb+0x1>
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	19 f4       	brne	.+6      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
					send_message(response[2]);
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	9e 81       	ldd	r25, Y+6	; 0x06
 490:	04 de       	rcall	.-1016   	; 0x9a <send_message>
				}
				if (leak == 1 && lb == 1) {
 492:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <leak>
 496:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <leak+0x1>
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	49 f4       	brne	.+18     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 49e:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <lb>
 4a2:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <lb+0x1>
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	19 f4       	brne	.+6      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
					send_message(response[3]);
 4aa:	8f 81       	ldd	r24, Y+7	; 0x07
 4ac:	98 85       	ldd	r25, Y+8	; 0x08
 4ae:	f5 dd       	rcall	.-1046   	; 0x9a <send_message>
				}
			}
			if (counter <= 0) {
 4b0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <counter>
 4b4:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <counter+0x1>
 4b8:	18 16       	cp	r1, r24
 4ba:	19 06       	cpc	r1, r25
 4bc:	64 f0       	brlt	.+24     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				counter = WAIT;
 4be:	80 e1       	ldi	r24, 0x10	; 16
 4c0:	97 e2       	ldi	r25, 0x27	; 39
 4c2:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <counter+0x1>
 4c6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <counter>
				if (counter2 <= 0) {
 4ca:	10 16       	cp	r1, r16
 4cc:	11 06       	cpc	r1, r17
 4ce:	4c f4       	brge	.+18     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
					counter2 = WAIT2;
				}
				else {
					counter2--;
 4d0:	01 50       	subi	r16, 0x01	; 1
 4d2:	11 09       	sbc	r17, r1
 4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				}
			}
			else {
				counter--;
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <counter+0x1>
 4dc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <counter>
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				}
			}
			if (counter <= 0) {
				counter = WAIT;
				if (counter2 <= 0) {
					counter2 = WAIT2;
 4e2:	02 e0       	ldi	r16, 0x02	; 2
 4e4:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			else {
				counter--;
			}
			if (stop_key == '1') {
 4e6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <stop_key>
 4ea:	81 33       	cpi	r24, 0x31	; 49
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4ee:	54 c0       	rjmp	.+168    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
				BT_OFF();
 4f0:	fc dd       	rcall	.-1032   	; 0xea <BT_OFF>
				send = 0;
 4f2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__data_end+0x1>
 4f6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__data_end>
				if (PIND & (1<<PD2) && PIND & (1<<PD3)){
 4fa:	82 9b       	sbis	0x10, 2	; 16
 4fc:	14 c0       	rjmp	.+40     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 4fe:	83 9b       	sbis	0x10, 3	; 16
 500:	12 c0       	rjmp	.+36     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
					GIMSK |= 1<<INT1;
 502:	8b b7       	in	r24, 0x3b	; 59
 504:	80 68       	ori	r24, 0x80	; 128
 506:	8b bf       	out	0x3b, r24	; 59
					MCUCR &= ~((1<<ISC11) | (1<<ISC10));
 508:	85 b7       	in	r24, 0x35	; 53
 50a:	83 7f       	andi	r24, 0xF3	; 243
 50c:	85 bf       	out	0x35, r24	; 53
					GIMSK |= 1<<INT0;
 50e:	8b b7       	in	r24, 0x3b	; 59
 510:	80 64       	ori	r24, 0x40	; 64
 512:	8b bf       	out	0x3b, r24	; 59
					MCUCR &= ~((1<<ISC01) | (1<<ISC00));
 514:	85 b7       	in	r24, 0x35	; 53
 516:	8c 7f       	andi	r24, 0xFC	; 252
 518:	85 bf       	out	0x35, r24	; 53
					MCUCR |= 1<<SE;
 51a:	85 b7       	in	r24, 0x35	; 53
 51c:	80 62       	ori	r24, 0x20	; 32
 51e:	85 bf       	out	0x35, r24	; 53
					MCUCR |= (1<<SM0);
 520:	85 b7       	in	r24, 0x35	; 53
 522:	80 61       	ori	r24, 0x10	; 16
 524:	85 bf       	out	0x35, r24	; 53
				}
				if (~PIND & (1<<PD2) && PIND & (1<<PD3)) {
 526:	82 99       	sbic	0x10, 2	; 16
 528:	13 c0       	rjmp	.+38     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 52a:	83 9b       	sbis	0x10, 3	; 16
 52c:	11 c0       	rjmp	.+34     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
					GIMSK |= 1<<INT1;
 52e:	8b b7       	in	r24, 0x3b	; 59
 530:	80 68       	ori	r24, 0x80	; 128
 532:	8b bf       	out	0x3b, r24	; 59
					MCUCR &= ~((1<<ISC11) | (1<<ISC10));
 534:	85 b7       	in	r24, 0x35	; 53
 536:	83 7f       	andi	r24, 0xF3	; 243
 538:	85 bf       	out	0x35, r24	; 53
					WDTCR|=(1<<WDCE) | (1<<WDE);
 53a:	81 b5       	in	r24, 0x21	; 33
 53c:	88 61       	ori	r24, 0x18	; 24
 53e:	81 bd       	out	0x21, r24	; 33
					WDTCR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
 540:	87 e4       	ldi	r24, 0x47	; 71
 542:	81 bd       	out	0x21, r24	; 33
					MCUCR |= 1<<SE;
 544:	85 b7       	in	r24, 0x35	; 53
 546:	80 62       	ori	r24, 0x20	; 32
 548:	85 bf       	out	0x35, r24	; 53
					MCUCR |= (1<<SM0);
 54a:	85 b7       	in	r24, 0x35	; 53
 54c:	80 61       	ori	r24, 0x10	; 16
 54e:	85 bf       	out	0x35, r24	; 53
				}
				if (PIND & (1<<PD2) && ~PIND & (1<<PD3)) {
 550:	82 9b       	sbis	0x10, 2	; 16
 552:	13 c0       	rjmp	.+38     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 554:	83 99       	sbic	0x10, 3	; 16
 556:	11 c0       	rjmp	.+34     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					GIMSK |= 1<<INT0;
 558:	8b b7       	in	r24, 0x3b	; 59
 55a:	80 64       	ori	r24, 0x40	; 64
 55c:	8b bf       	out	0x3b, r24	; 59
					MCUCR &= ~((1<<ISC01) | (1<<ISC00));
 55e:	85 b7       	in	r24, 0x35	; 53
 560:	8c 7f       	andi	r24, 0xFC	; 252
 562:	85 bf       	out	0x35, r24	; 53
					WDTCR|=(1<<WDCE) | (1<<WDE);
 564:	81 b5       	in	r24, 0x21	; 33
 566:	88 61       	ori	r24, 0x18	; 24
 568:	81 bd       	out	0x21, r24	; 33
					WDTCR = (1<<WDIE) | (1<<WDP3);
 56a:	80 e6       	ldi	r24, 0x60	; 96
 56c:	81 bd       	out	0x21, r24	; 33
					MCUCR |= 1<<SE;
 56e:	85 b7       	in	r24, 0x35	; 53
 570:	80 62       	ori	r24, 0x20	; 32
 572:	85 bf       	out	0x35, r24	; 53
					MCUCR |= (1<<SM0);
 574:	85 b7       	in	r24, 0x35	; 53
 576:	80 61       	ori	r24, 0x10	; 16
 578:	85 bf       	out	0x35, r24	; 53
				}
				if (~PIND & (1<<PD2) && ~PIND & (1<<PD3)) {
 57a:	82 99       	sbic	0x10, 2	; 16
 57c:	0d c0       	rjmp	.+26     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 57e:	83 99       	sbic	0x10, 3	; 16
 580:	0b c0       	rjmp	.+22     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
					WDTCR|=(1<<WDCE) | (1<<WDE);
 582:	81 b5       	in	r24, 0x21	; 33
 584:	88 61       	ori	r24, 0x18	; 24
 586:	81 bd       	out	0x21, r24	; 33
					WDTCR = (1<<WDIE) | (1<<WDP3) | (1<<WDP0);
 588:	81 e6       	ldi	r24, 0x61	; 97
 58a:	81 bd       	out	0x21, r24	; 33
					MCUCR |= 1<<SE;
 58c:	85 b7       	in	r24, 0x35	; 53
 58e:	80 62       	ori	r24, 0x20	; 32
 590:	85 bf       	out	0x35, r24	; 53
					MCUCR |= (1<<SM0);
 592:	85 b7       	in	r24, 0x35	; 53
 594:	80 61       	ori	r24, 0x10	; 16
 596:	85 bf       	out	0x35, r24	; 53
				}
				
			}
		}
		asm("sleep");
 598:	88 95       	sleep
	}
 59a:	2e cf       	rjmp	.-420    	; 0x3f8 <main+0x74>

0000059c <_exit>:
 59c:	f8 94       	cli

0000059e <__stop_program>:
 59e:	ff cf       	rjmp	.-2      	; 0x59e <__stop_program>
