
leak_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000076  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000561  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e0  00000000  00000000  000006bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000240  00000000  00000000  00000b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1e c0       	rjmp	.+60     	; 0x72 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:



int main(void)
{
	DDRA |= ((1<<0) | (1<<1));
  38:	8a b3       	in	r24, 0x1a	; 26
  3a:	83 60       	ori	r24, 0x03	; 3
  3c:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1<<0);
  3e:	8b b3       	in	r24, 0x1b	; 27
  40:	8e 7f       	andi	r24, 0xFE	; 254
  42:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (1<<1);
  44:	8b b3       	in	r24, 0x1b	; 27
  46:	82 60       	ori	r24, 0x02	; 2
  48:	8b bb       	out	0x1b, r24	; 27
	DDRD &= ~((1<<2) | (1<<3));
  4a:	81 b3       	in	r24, 0x11	; 17
  4c:	83 7f       	andi	r24, 0xF3	; 243
  4e:	81 bb       	out	0x11, r24	; 17
	PORTD |= ((1<<2) | (1<<3));
  50:	82 b3       	in	r24, 0x12	; 18
  52:	8c 60       	ori	r24, 0x0C	; 12
  54:	82 bb       	out	0x12, r24	; 18
	//

    while (1) 
    {
		PORTA ^= ((1<<0) | (1<<1));
  56:	9b b3       	in	r25, 0x1b	; 27
  58:	83 e0       	ldi	r24, 0x03	; 3
  5a:	89 27       	eor	r24, r25
  5c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	2f e9       	ldi	r18, 0x9F	; 159
  60:	86 e8       	ldi	r24, 0x86	; 134
  62:	91 e0       	ldi	r25, 0x01	; 1
  64:	21 50       	subi	r18, 0x01	; 1
  66:	80 40       	sbci	r24, 0x00	; 0
  68:	90 40       	sbci	r25, 0x00	; 0
  6a:	e1 f7       	brne	.-8      	; 0x64 <__SREG__+0x25>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <__SREG__+0x2f>
  6e:	00 00       	nop
  70:	f2 cf       	rjmp	.-28     	; 0x56 <__SREG__+0x17>

00000072 <_exit>:
  72:	f8 94       	cli

00000074 <__stop_program>:
  74:	ff cf       	rjmp	.-2      	; 0x74 <__stop_program>
