
leak_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800088  00800088  000003d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b1  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000619  00000000  00000000  00000c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046c  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038b  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000369  00000000  00000000  00001c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	90 c0       	rjmp	.+288    	; 0x124 <__vector_1>
   4:	cf c0       	rjmp	.+414    	; 0x1a4 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	fd c0       	rjmp	.+506    	; 0x20a <__vector_7>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e1       	ldi	r30, 0x1C	; 28
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 38       	cpi	r26, 0x88	; 136
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e8       	ldi	r26, 0x88	; 136
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 39       	cpi	r26, 0x90	; 144
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	ec d0       	rcall	.+472    	; 0x232 <main>
  5a:	5e c1       	rjmp	.+700    	; 0x318 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PIN_Init>:
}

unsigned char UART_Receive(void){
	while (!(UCSRA & (1<<RXC)));
	return UDR;
}
  5e:	8b b7       	in	r24, 0x3b	; 59
  60:	80 64       	ori	r24, 0x40	; 64
  62:	8b bf       	out	0x3b, r24	; 59
  64:	85 b7       	in	r24, 0x35	; 53
  66:	8e 7f       	andi	r24, 0xFE	; 254
  68:	85 bf       	out	0x35, r24	; 53
  6a:	85 b7       	in	r24, 0x35	; 53
  6c:	82 60       	ori	r24, 0x02	; 2
  6e:	85 bf       	out	0x35, r24	; 53
  70:	8b b7       	in	r24, 0x3b	; 59
  72:	80 68       	ori	r24, 0x80	; 128
  74:	8b bf       	out	0x3b, r24	; 59
  76:	85 b7       	in	r24, 0x35	; 53
  78:	8c 60       	ori	r24, 0x0C	; 12
  7a:	85 bf       	out	0x35, r24	; 53
  7c:	8f b7       	in	r24, 0x3f	; 63
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8f bf       	out	0x3f, r24	; 63
  82:	81 b3       	in	r24, 0x11	; 17
  84:	83 7f       	andi	r24, 0xF3	; 243
  86:	81 bb       	out	0x11, r24	; 17
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	8c 60       	ori	r24, 0x0C	; 12
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	8a b3       	in	r24, 0x1a	; 26
  90:	83 60       	ori	r24, 0x03	; 3
  92:	8a bb       	out	0x1a, r24	; 26
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	8c 7f       	andi	r24, 0xFC	; 252
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	08 95       	ret

0000009c <UART_Init>:
  9c:	92 b9       	out	0x02, r25	; 2
  9e:	89 b9       	out	0x09, r24	; 9
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	8e e0       	ldi	r24, 0x0E	; 14
  a6:	83 b9       	out	0x03, r24	; 3
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	78 94       	sei
  b0:	08 95       	ret

000000b2 <UART_Transmit>:
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <UART_Transmit>
  b6:	8c b9       	out	0x0c, r24	; 12
  b8:	08 95       	ret

000000ba <send_message>:

void send_message(char* message){
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	7c 01       	movw	r14, r24
	int length = strlen(message);
  c8:	fc 01       	movw	r30, r24
  ca:	01 90       	ld	r0, Z+
  cc:	00 20       	and	r0, r0
  ce:	e9 f7       	brne	.-6      	; 0xca <send_message+0x10>
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	8f 01       	movw	r16, r30
  d4:	08 1b       	sub	r16, r24
  d6:	19 0b       	sbc	r17, r25
	for (int i = 0; i < length; i++) {
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	d0 e0       	ldi	r29, 0x00	; 0
  dc:	06 c0       	rjmp	.+12     	; 0xea <__stack+0xb>
		UART_Transmit(message[i]);
  de:	f7 01       	movw	r30, r14
  e0:	ec 0f       	add	r30, r28
  e2:	fd 1f       	adc	r31, r29
  e4:	80 81       	ld	r24, Z
  e6:	e5 df       	rcall	.-54     	; 0xb2 <UART_Transmit>
	return UDR;
}

void send_message(char* message){
	int length = strlen(message);
	for (int i = 0; i < length; i++) {
  e8:	21 96       	adiw	r28, 0x01	; 1
  ea:	c0 17       	cp	r28, r16
  ec:	d1 07       	cpc	r29, r17
  ee:	bc f3       	brlt	.-18     	; 0xde <send_message+0x24>
		UART_Transmit(message[i]);
	};
	UART_Transmit('\n');
  f0:	8a e0       	ldi	r24, 0x0A	; 10
  f2:	df df       	rcall	.-66     	; 0xb2 <UART_Transmit>
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	ff 90       	pop	r15
  fe:	ef 90       	pop	r14
 100:	08 95       	ret

00000102 <BT_ON>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f e3       	ldi	r18, 0x3F	; 63
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <BT_ON+0x6>
 110:	00 c0       	rjmp	.+0      	; 0x112 <BT_ON+0x10>
 112:	00 00       	nop
void BT_ON(void){
	_delay_ms(1000);
	PORTA |= ((1<<0) | (1<<1));
 114:	8b b3       	in	r24, 0x1b	; 27
 116:	83 60       	ori	r24, 0x03	; 3
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	08 95       	ret

0000011c <BT_OFF>:
	
}

void BT_OFF(void){
	PORTA &= ~((1<<0) | (1<<1));
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	8c 7f       	andi	r24, 0xFC	; 252
 120:	8b bb       	out	0x1b, r24	; 27
 122:	08 95       	ret

00000124 <__vector_1>:
}

ISR(INT0_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	stop_key = 0;
 146:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <stop_key+0x1>
 14a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <stop_key>
	counter = WAIT;
 14e:	84 e6       	ldi	r24, 0x64	; 100
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <counter+0x1>
 156:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <counter>
	if (~PIND & (1<<2)) {
 15a:	82 99       	sbic	0x10, 2	; 16
 15c:	0a c0       	rjmp	.+20     	; 0x172 <__vector_1+0x4e>
		leak = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <leak+0x1>
 166:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <leak>
		MCUCR |= (1<<0);
 16a:	85 b7       	in	r24, 0x35	; 53
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	85 bf       	out	0x35, r24	; 53
 170:	07 c0       	rjmp	.+14     	; 0x180 <__vector_1+0x5c>
	}
	else {
		leak = 0;
 172:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <leak+0x1>
 176:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <leak>
		MCUCR &= ~(1<<0);
 17a:	85 b7       	in	r24, 0x35	; 53
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	85 bf       	out	0x35, r24	; 53
	}
	BT_ON();
 180:	c0 df       	rcall	.-128    	; 0x102 <BT_ON>
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_2>:

ISR(INT1_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	stop_key = 0;
 1c6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <stop_key+0x1>
 1ca:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <stop_key>
	counter = WAIT;
 1ce:	84 e6       	ldi	r24, 0x64	; 100
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <counter+0x1>
 1d6:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <counter>
	lb = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 1e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	BT_ON();
 1e6:	8d df       	rcall	.-230    	; 0x102 <BT_ON>
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_7>:

ISR(USART_RX_vect){
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
	stop_key = UDR;
 218:	8c b1       	in	r24, 0x0c	; 12
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <stop_key+0x1>
 220:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <stop_key>
}
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <main>:

int main(void)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	dd 27       	eor	r29, r29
 23a:	c4 50       	subi	r28, 0x04	; 4
 23c:	cd bf       	out	0x3d, r28	; 61
	PIN_Init();
 23e:	0f df       	rcall	.-482    	; 0x5e <PIN_Init>
	UART_Init(BAUDRATE);
 240:	8c e0       	ldi	r24, 0x0C	; 12
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	2b df       	rcall	.-426    	; 0x9c <UART_Init>
	char* response[2] = {"No leak!", "Leak is detected!"};
 246:	80 e6       	ldi	r24, 0x60	; 96
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	9a 83       	std	Y+2, r25	; 0x02
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	89 e6       	ldi	r24, 0x69	; 105
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	9c 83       	std	Y+4, r25	; 0x04
 254:	8b 83       	std	Y+3, r24	; 0x03
	leak = 0;
 256:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <leak+0x1>
 25a:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <leak>
	BT_ON();
 25e:	51 df       	rcall	.-350    	; 0x102 <BT_ON>
	while (1){
		if (leak == 0 || leak == 1 || lb == 1){
 260:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <leak>
 264:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <leak+0x1>
 268:	ac 01       	movw	r20, r24
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	91 05       	cpc	r25, r1
 26e:	38 f0       	brcs	.+14     	; 0x27e <main+0x4c>
 270:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__data_end>
 274:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__data_end+0x1>
 278:	21 30       	cpi	r18, 0x01	; 1
 27a:	31 05       	cpc	r19, r1
 27c:	89 f7       	brne	.-30     	; 0x260 <main+0x2e>
			if (stop_key != '1' && counter == WAIT) {
 27e:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <stop_key>
 282:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <stop_key+0x1>
 286:	21 33       	cpi	r18, 0x31	; 49
 288:	31 05       	cpc	r19, r1
 28a:	59 f1       	breq	.+86     	; 0x2e2 <main+0xb0>
 28c:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <counter>
 290:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <counter+0x1>
 294:	24 36       	cpi	r18, 0x64	; 100
 296:	31 05       	cpc	r19, r1
 298:	21 f5       	brne	.+72     	; 0x2e2 <main+0xb0>
				if (leak == 0 || leak == 1) {
 29a:	42 30       	cpi	r20, 0x02	; 2
 29c:	51 05       	cpc	r21, r1
 29e:	58 f4       	brcc	.+22     	; 0x2b6 <main+0x84>
					send_message(response[leak]);
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	e1 e0       	ldi	r30, 0x01	; 1
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ec 0f       	add	r30, r28
 2aa:	fd 1f       	adc	r31, r29
 2ac:	e8 0f       	add	r30, r24
 2ae:	f9 1f       	adc	r31, r25
 2b0:	80 81       	ld	r24, Z
 2b2:	91 81       	ldd	r25, Z+1	; 0x01
 2b4:	02 df       	rcall	.-508    	; 0xba <send_message>
				}
				if (lb == 1) {
 2b6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 2ba:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	19 f4       	brne	.+6      	; 0x2c8 <main+0x96>
					send_message("Low battery!");
 2c2:	8b e7       	ldi	r24, 0x7B	; 123
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	f9 de       	rcall	.-526    	; 0xba <send_message>
				}
				if (counter <= 0) {
 2c8:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <counter>
 2cc:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <counter+0x1>
 2d0:	18 16       	cp	r1, r24
 2d2:	19 06       	cpc	r1, r25
 2d4:	34 f0       	brlt	.+12     	; 0x2e2 <main+0xb0>
					counter = WAIT;
 2d6:	84 e6       	ldi	r24, 0x64	; 100
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <counter+0x1>
 2de:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <counter>
				}
			}
			if (stop_key == '1') {
 2e2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <stop_key>
 2e6:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <stop_key+0x1>
 2ea:	c1 97       	sbiw	r24, 0x31	; 49
 2ec:	59 f4       	brne	.+22     	; 0x304 <main+0xd2>
				BT_OFF();
 2ee:	16 df       	rcall	.-468    	; 0x11c <BT_OFF>
				leak = -1;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	9f ef       	ldi	r25, 0xFF	; 255
 2f4:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <leak+0x1>
 2f8:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <leak>
				lb = 0;
 2fc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 300:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
			}
			counter--;
 304:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <counter>
 308:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <counter+0x1>
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <counter+0x1>
 312:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <counter>
 316:	a4 cf       	rjmp	.-184    	; 0x260 <main+0x2e>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
