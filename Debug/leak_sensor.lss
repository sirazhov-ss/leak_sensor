
leak_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a4  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c7  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  00000ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ae  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e3       	ldi	r30, 0x3C	; 60
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 37       	cpi	r26, 0x7C	; 124
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>
  48:	41 d0       	rcall	.+130    	; 0xcc <main>
  4a:	76 c0       	rjmp	.+236    	; 0x138 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <PIN_Init>:
#include <string.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void PIN_Init(void){
	DDRA |= ((1<<0) | (1<<1));
  4e:	8a b3       	in	r24, 0x1a	; 26
  50:	83 60       	ori	r24, 0x03	; 3
  52:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1<<0);
  54:	8b b3       	in	r24, 0x1b	; 27
  56:	8e 7f       	andi	r24, 0xFE	; 254
  58:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (1<<1);
  5a:	8b b3       	in	r24, 0x1b	; 27
  5c:	82 60       	ori	r24, 0x02	; 2
  5e:	8b bb       	out	0x1b, r24	; 27
	DDRD &= ~((1<<2) | (1<<3));
  60:	81 b3       	in	r24, 0x11	; 17
  62:	83 7f       	andi	r24, 0xF3	; 243
  64:	81 bb       	out	0x11, r24	; 17
	PORTD |= ((1<<2) | (1<<3));
  66:	82 b3       	in	r24, 0x12	; 18
  68:	8c 60       	ori	r24, 0x0C	; 12
  6a:	82 bb       	out	0x12, r24	; 18
  6c:	08 95       	ret

0000006e <UART_Init>:
}

void UART_Init(unsigned int baud){
	UBRRH = (unsigned char)(baud>>8);
  6e:	92 b9       	out	0x02, r25	; 2
	UBRRL = (unsigned char)baud;
  70:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  72:	88 e1       	ldi	r24, 0x18	; 24
  74:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<USBS)|(3<<UCSZ0);
  76:	8e e0       	ldi	r24, 0x0E	; 14
  78:	83 b9       	out	0x03, r24	; 3
  7a:	08 95       	ret

0000007c <UART_Transmit>:
}

void UART_Transmit(unsigned char data){
	while (!(UCSRA & (1<<UDRE)));
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <UART_Transmit>
	UDR = data;
  80:	8c b9       	out	0x0c, r24	; 12
  82:	08 95       	ret

00000084 <send_message>:
}

void send_message(char* message){
  84:	ef 92       	push	r14
  86:	ff 92       	push	r15
  88:	0f 93       	push	r16
  8a:	1f 93       	push	r17
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	7c 01       	movw	r14, r24
	int length = strlen(message);
  92:	fc 01       	movw	r30, r24
  94:	01 90       	ld	r0, Z+
  96:	00 20       	and	r0, r0
  98:	e9 f7       	brne	.-6      	; 0x94 <send_message+0x10>
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	8f 01       	movw	r16, r30
  9e:	08 1b       	sub	r16, r24
  a0:	19 0b       	sbc	r17, r25
	for (int i = 0; i < length; i++) {
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	06 c0       	rjmp	.+12     	; 0xb4 <send_message+0x30>
		UART_Transmit(message[i]);
  a8:	f7 01       	movw	r30, r14
  aa:	ec 0f       	add	r30, r28
  ac:	fd 1f       	adc	r31, r29
  ae:	80 81       	ld	r24, Z
  b0:	e5 df       	rcall	.-54     	; 0x7c <UART_Transmit>
	UDR = data;
}

void send_message(char* message){
	int length = strlen(message);
	for (int i = 0; i < length; i++) {
  b2:	21 96       	adiw	r28, 0x01	; 1
  b4:	c0 17       	cp	r28, r16
  b6:	d1 07       	cpc	r29, r17
  b8:	bc f3       	brlt	.-18     	; 0xa8 <send_message+0x24>
		UART_Transmit(message[i]);
	};
	UART_Transmit('\n');
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	df df       	rcall	.-66     	; 0x7c <UART_Transmit>
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	1f 91       	pop	r17
  c4:	0f 91       	pop	r16
  c6:	ff 90       	pop	r15
  c8:	ef 90       	pop	r14
  ca:	08 95       	ret

000000cc <main>:

int main(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	dd 27       	eor	r29, r29
  d4:	c4 50       	subi	r28, 0x04	; 4
  d6:	cd bf       	out	0x3d, r28	; 61
	PIN_Init();
  d8:	ba df       	rcall	.-140    	; 0x4e <PIN_Init>
	UART_Init(BAUDRATE);
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	c7 df       	rcall	.-114    	; 0x6e <UART_Init>
	
	char* response[2] = {"Leak is detected!", "No leak!"};
  e0:	80 e6       	ldi	r24, 0x60	; 96
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9a 83       	std	Y+2, r25	; 0x02
  e6:	89 83       	std	Y+1, r24	; 0x01
  e8:	82 e7       	ldi	r24, 0x72	; 114
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	9c 83       	std	Y+4, r25	; 0x04
  ee:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <__stack+0x1b>
		PORTA ^= ((1<<0) | (1<<1));
		send_message(response[i]);
		_delay_ms(500);
		i++;
		if (i > 1) {
			i = 0;
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	10 e0       	ldi	r17, 0x00	; 0
	char* response[2] = {"Leak is detected!", "No leak!"};
	int i = 0;
	
    while (1) 
    {
		PORTA ^= ((1<<0) | (1<<1));
  fa:	9b b3       	in	r25, 0x1b	; 27
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	89 27       	eor	r24, r25
 100:	8b bb       	out	0x1b, r24	; 27
		send_message(response[i]);
 102:	f8 01       	movw	r30, r16
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	8c 0f       	add	r24, r28
 10e:	9d 1f       	adc	r25, r29
 110:	e8 0f       	add	r30, r24
 112:	f9 1f       	adc	r31, r25
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	b5 df       	rcall	.-150    	; 0x84 <send_message>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	9f e9       	ldi	r25, 0x9F	; 159
 11c:	26 e8       	ldi	r18, 0x86	; 134
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	91 50       	subi	r25, 0x01	; 1
 122:	20 40       	sbci	r18, 0x00	; 0
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <__stack+0x41>
 128:	00 c0       	rjmp	.+0      	; 0x12a <__stack+0x4b>
 12a:	00 00       	nop
		_delay_ms(500);
		i++;
 12c:	0f 5f       	subi	r16, 0xFF	; 255
 12e:	1f 4f       	sbci	r17, 0xFF	; 255
		if (i > 1) {
 130:	02 30       	cpi	r16, 0x02	; 2
 132:	11 05       	cpc	r17, r1
 134:	04 f7       	brge	.-64     	; 0xf6 <__stack+0x17>
 136:	e1 cf       	rjmp	.-62     	; 0xfa <__stack+0x1b>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
